# Basic Configuration
set shell zsh
set shellopts '-euy'
set ifs "\n"
set scrolloff 10
set icons
set drawbox
set period 1
set color256
set hidden
set previewer ctpv
set cleaner ctpvclear
set info size:time
set sortby natural
set sortby ext
set dircounts
set dirpreviews
set ignorecase
set smartcase
set relativenumber
set sixel false

%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

&ctpv -s $id
&ctpvquit $id

# Misc
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"
cmd sudo-mkdir $sudo mkdir -p "$(echo $* | tr ' ' '\ ')"
cmd mkfile $vim "$(echo $* | tr ' ' '\ ')"
cmd sudo-mkfile $sudo vim "$(echo $* | tr ' ' '\ ')"
cmd sshfs ${{
    set -f
	clear; tput cup $(($(tput lines)/3)); tput bold
    vared -p "Enter SSH target host (user@host): " -c t_host
    vared -p "Enter SSH target port: " -c t_port
    vared -p "Enter target destination: " -c t_dest
    sshfs -p $t_port $t_host:$t_dest /media/$(whoami)/sshfs
}}
# cmd sshfs-f $sshfs -p 8022 bohr@192.168.1.239:/storage/emulated/150/Download /media/fermi/Fermion-sshfs
cmd dragon %dragon -a -x $fx
cmd dragon-stay %dragon -a $fx
cmd dragon-target %dragon -t
cmd dlfile %dlfile
cmd bulkrename $vimv $fx
cmd open-with %"$@" $fx
cmd filesize ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    du -sh $fx
    trap SIGINT
    while true; do 
        sleep 1
    done
}}

cmd setbg ${{
    feh -B white --bg-fill $fx
}}

cmd shell-put ${{
    cd $PWD
    $SHELL
}}

cmd git-download ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    vared -p "URL: " -c url
    vared -p "File/directory: " -c Path
    svn export $url/trunk/$Path
    printf "$Path downloaded!"
    sleep 1;
}}

cmd nautilus-open ${{
    nautilus $PWD
}}

cmd depkg ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
	vared -p "install?[Y/n]" -c ans
	[[ $ans = "n" ]] || sudo dpkg -i "$fx"
}}

cmd toaudio ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
	vared -p "extract audio?[Y/n]" -c ans
	[[ $ans = "n" ]] || ffmpeg -i "$fx" -c:a libmp3lame -b:a 256k -ac 2 -map a "$(basename "${fx%.*}").mp3"
}}

cmd video_preview ${{
    mpv --vo=tct --hwdec=auto --title='Playing "$fx"' "$fx"
}}

cmd image_preview ${{
    cache="$(mktemp "${TMPDIR:-/tmp}/thumb_cache.XXXXX")"
    ffmpegthumbnailer -i "$f" -o "$cache" -s 0 -s 1080 -q 10
    ~/.config/lf/draw_img.sh "$cache"
}}

cmd pager_split ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
	vared -p "Use Lynx?[Y/n]" -c ans
	if [ $ans = "n" ]; then
        tmux neww -n 'pager' "$HOME/Documents/Configs/dotfiles/scripts/test.sh"
    else
        lynx $f
    fi
    # i=1
    # for j in "$fx"
    #     do
    #         ck_pane="$(tmux list-panes | awk -F" " '{ print $1 }')"
            
    #         if [ "$ck_pane" != "2:" ]; then
    #             # tmux split-window -h \;
    #             tmux split-window -h "batcat $j" &
    #         # fi
    #         else
    #         # if [ "$ck_pane" = "2:" ]; then
    #             tmux send-keys -t $i "batcat $j"
    #             ((i++))
    #         fi
    #     done
}}

# Zoxide integration
# cmd z %{{
#     result="$(zoxide query --exclude '${PWD}' -- '$1')"
#     lf -remote "send ${id} cd '${result}'"
# }}

# cmd zi ${{
#     result="$(zoxide query -i -- '$1')"
#     lf -remote "send ${id} cd '${result}'"
# }}


# Newfolder with selected items
cmd newfold ${{
    set -f
    clear; tput cup $(($(tput lines)/3)); tput bold
	printf "%s\n" $fx
    vared -p "Directory name: " -c newd
    mkdir -- $newd
    mv -- $fx $newd
}}


# Searchable bookmarks
cmd bookmark_jump ${{
    res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    lf -remote "send $id cd \"$res\""
}}

cmd mark_create ${{
    read ans
    echo $PWD > $LF_BOOKMARK_PATH/$ans
}}


# Manage Trash
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [[ "$files" ]]; do
    file=${files%%;*}
    trash-put "$(basename "$file")"
    if [[ "$files" = "$file" ]]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty
cmd restore_trash %trash-restore


# Manage permissions
cmd sudochmod ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n" $fx
    vared -p "Mode Bits: " -c ans
    sudo chmod -Rv $ans $fx

    lf -remote 'send reload'
}}

cmd chmod ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n" $fx
    
    dir_mode=""
    file_mode=""
    
    if [ -d "$(echo "$fx" | head -n1)" ]; then
        vared -p "Mode Bits[Dirs]: " dir_mode
        vared -p "Mode Bits[Files]: " file_mode
    elif [ -f "$(echo "$fx" | head -n1)" ]; then
        vared -p "Mode Bits[Files]: " file_mode
    else
        echo "Invalid selection"
        exit 1
    fi
    
    for f in $fx; do
        if [ -d "$f" ]; then
            if [ -n "$dir_mode" ]; then
                sudo chmod -Rv $dir_mode "$f"
                find "$f" -type d -exec chmod -Rv $dir_mode {} +
            fi
            if [ -n "$file_mode" ]; then
                find "$f" -type f -exec chmod -Rv $file_mode {} +
            fi
        elif [ -f "$f" ]; then
            if [ -n "$file_mode" ]; then
                sudo chmod -Rv $file_mode "$f"
            fi
        fi
    done
    
    lf -remote 'send reload'
}}


cmd chown ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n" $fx
    vared -p "owner:group: " -c ans
    if [[ $ans = "~" ]]; then
        sudo chown -Rv fermi:fermi $fx
    elif [[ $ans = "/" ]]; then
        sudo chown -Rv root:root $fx
    elif [[ $ans == *":"* ]]; then
        sudo chown -Rv $ans $fx
    else
        sudo chown -Rv $ans:$ans $fx
    fi

    lf -remote 'send reload'
}}


# Extract & Compress
cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" $fx
    vared -p "Extract?[Y/n]: " -c ans
    [[ $ans = "n" ]] || aunpack $fx
    printf "Press any key to exit!"
    read ans

    lf -remote 'send reload'
}}

cmd compress ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n" $fx
    vared -p "Compress?[Y/n]: " -c ans
    [[ $ans = "n" ]] || {
        vared -p "Output zip: " -c zip
        zip -r9vA -Zdeflate $zip $fx
    }
    printf "Press any key to exit!"
    read ans

    lf -remote 'send reload'
}}


# Symlinks
#cmd symlink ${{
#	clear; tput cup $(($(tput lines)/3)); tput bold
#	set -f
#    for i in $fx; do
#        printf "%s\n\t" $i
#        vared -p "Destination for symlink: " -c des
#        sudo ln -s $i $des/$(basename $i)
#    done
#    printf "Press any key to exit!"
#    read ans
#    # trap SIGINT
#    # while true; do
#    #     sleep 1
#    # done
#}}

cmd symlink ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    for i in $fx; do
        printf "%s\n\t" "$i"
        vared -p "Destination for symlink (/usr/bin): " -c des
        if [[ -z "$des" ]]; then
            des="/usr/bin"
        fi
        sudo ln -s "$i" "$des/$(basename "$i")"
    done
    printf "Press any key to exit!"
    read -n 1 ans
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    [[ $# -lt 1 ]] && { lf -remote "send $id echo no files to link"; exit 0; }
    case $mode in
        copy) ln -sr -t . -- $@;;
        move) ln -t . -- $@;;
    esac
    rm ~/.local/share/lf/files

    lf -remote "send clear"
}}


# Delete
cmd sudodelete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n" $fx
    vared -p "Delete?[Y/n]: " -c ans
    [[ $ans = "n" ]] || sudo rm -rfv -- $fx

    lf -remote 'send reload'
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	printf "%s\n" $fx
    vared -p "Delete?[Y/n]: " -c ans
    [[ $ans = "n" ]] || rm -rfv -- $fx

    lf -remote 'send reload'
}}


# Mounting/Unmount
cmd mount ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" $fx
    vared -p "Mountpoint directory name: " -c ans
    [[ -d /media/$(whoami)/$ans ]] || mkdir /$(whoami)/$ans
    sudo mount $fx /media/$(whoami)/$ans
    echo "/media/$(whoami)/$ans mounted!"
    printf "Press any key to exit!"
    read ans
    # trap SIGINT
    # while true; do
    #     sleep 1
    # done

    lf -remote 'send reload'
}}

cmd mount_adata ${{
    $HOME/Documents/Configs/dotfiles/scripts/mntadata.sh
    lf -remote 'send reload'
}}

cmd mtp-mount ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    echo "[+] mtp is loading..."
    mtp-connect&
    wait;
    vared -p "mountpoint directory name: " -c ans
    [[ -d /media/fermi/$ans ]] || mkdir /media/fermi/$ans
    jmtpfs -o auto_unmount /media/fermi/$ans
    echo "/media/fermi/$ans mounted!"
    printf "Press any key to exit!"
    read ans
    # trap SIGINT
    # while true; do
    #     sleep 1
    # done

    lf -remote 'send reload'
}}

cmd unmount ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" $fx
    vared -p "Unmount?[Y/n]: " -c ans
    [[ $ans = "n" ]] || { sudo umount -l $fx && \
    sudo rm -rfv -- "$fx"; }
    printf "Press any key to exit!"
    read ans
    # trap SIGINT
    # while true; do
    #     sleep 1
    # done

    lf -remote 'send reload'
}}


# Handle Kdeconnect
cmd kdeconnect ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n" "$fx"
    # vared -p "Destination(Default Fermion): " -c ans
    # if [[ -z $ans ]]; then
    #     ans="Fermion"
    # fi
    kde_devs=$(kdeconnect-cli --list-available 2> /dev/null | grep "(paired and reachable)" | awk -F: '{print $1}' | sed 's/- //')
    if [[ -z $kde_devs ]]; then
        echo "No devices found"
        exit 1
    fi
    echo "Available devices:"
    echo "$kde_devs" | nl
    vared -p "Select device number: " -c dev_num
    device=$(echo "$kde_devs" | sed -n "${dev_num}p")

    sanitize_filename() {
        local filename="$1"
        sanitize=$(basename "$filename" | sed 's/[^a-zA-Z0-9 ._-]/_/g' | tr -s ' ')
        sanitize=$(echo "$sanitize" | sed 's/^_*//;s/_*$//;s/__*/_/g')
        echo "$sanitize"
    }

    rename_files_in_directory() {
        local dir="$1"
        find "$dir" -type f | while read -r file; do
            pathname=$(dirname "$file")
            sanitize=$(sanitize_filename "$file")
            new_path="$pathname/$sanitize"
            if [[ "$file" != "$new_path" ]]; then
                mv "$file" "$new_path"
                if [[ $? -ne 0 ]]; then
                    echo "Error renaming $file to $new_path"
                    new_path="$file"
                fi
            fi
            send_files "$new_path"
        done
    }

    send_files() {
        for i in "$@"; do
            if [[ -d "$i" ]]; then
                find "$i" -type f -size +1c \
                -exec kdeconnect-cli --share {} --name "$device" 2> /dev/null \;
            elif [[ -f "$i" ]]; then
                if [[ $(stat -c%s "$i") -gt 1 ]]; then
                    kdeconnect-cli --share "$i" --name "$device" 2> /dev/null
                fi
            fi
        done
    }
    for i in $fx; do
        if [[ -d "$i" ]]; then
            rename_files_in_directory "$i"
        elif [[ -f "$i" ]]; then
            sanitize=$(sanitize_filename "$i")
            pathname=$(dirname "$i")
            new_path="$pathname/$sanitize"
            if [[ "$i" != "$new_path" ]]; then
                mv "$i" "$new_path"
                if [[ $? -ne 0 ]]; then
                    echo "Error renaming $i to $new_path"
                    new_path="$i"
                fi
            fi
            send_files "$new_path"
        fi
    done
    printf "Press any key to exit!"
    read ans
    # trap SIGINT
    # while true; do
    #     sleep 1
    # done
}}


# Handle ADB
cmd adb ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
	printf "%s\n" $fx
    # vared -p "IP (default 192.168.1.65): " -c ip
    # if [ -z "$ip" ]; then
    #     ip="192.168.1.65"
    # fi
    # vared -p "Port: " -c port
    # if [ -z "$port" ]; then
    # else
    #     device="${ip}:${port}"
    # fi
    adb_devices=$(adb devices | awk 'NR>1 && $2=="device" {print $1}')
    if [[ -z $adb_devices ]]; then
        echo "No devices found"
        exit 1
    fi
    adb_devices_array=($adb_devices)
    echo "Available devices:"
    echo "$adb_devices" | nl
    vared -p "Select device number: " -c dev_id
    if ! [[ "$dev_id" =~ ^[0-9]+$ ]] || ((dev_id < 1 || dev_id > ${#adb_devices_array[@]})); then
        echo "Invalid selection"
        exit 1
    fi
    device=${adb_devices_array[$((dev_id))]}
    echo "Selected device: $device"
    send_files() {
        set -f
        vared -p "Specify destination: " -c dest
        # if [[ -z $dest ]]; then
        #     dest="/sdcard/Download"
        # fi
        for i in $fx; do
            # if [[ $(stat -c%s "$i") -gt 1 ]]; then
            if [[ -e $i && -s $i ]]; then
                sanitize=$(basename "$i" | sed 's/[^a-zA-Z0-9 .,_-]/ /g' | tr -s ' ')
                sanitize=$(echo "$sanitize" | sed 's/^_*//;s/_*$//;s/__*/_/g')
                adb -s "$device" push $i /sdcard/Download/$dest/$sanitize
            else
                echo "File $i does not exist or is empty, skipping."
            fi
        done
        printf "Press any key to exit!"
        read ans
        # trap SIGINT
        # while true; do
        #     sleep 1
        # done
    }

    send_files $fx
}} # OK


# Handle Rsync
cmd rsync ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
	printf "%s\n" $fx
    vared -p "Path[$HOME]: " -c dest
    # if [[ -z $dest ]]; then
    #     dest="bohr@192.168.1.65:sdcard/Download"
    # fi
    [[ -d $HOME/$dest ]] || mkdir -p $HOME/$dest
    rsync -ausxhP -e ssh -vv --ignore-existing $fx $HOME/$dest
    if [[ $? -eq 0 ]]; then
        printf "%s\n" "[+] Rsync transfer complete"
        read ans
    fi
    # trap SIGINT
    # while true; do 
    #     sleep 1
    # done
}}

# Show progress while pasting
cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -ausvxh --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}




#Unmap defaults
map e
map d
map f
map y
map p
map m
map r
map c
map t
map sa
map se
map sn
map ss
map st
map gh
map '"'

# Keybindings
map fz $lf -remote "send $id select \"$(fzf --border --preview=$HOME/./fzf-preview.sh\ {})\""
map rr rename
map br bulkrename
map I push rr<c-a> # beginning
map re push rr<a-b><a-b><a-f> # before extension
map bg setbg
# map z. z
# map zi zi

map fi filter
map du filesize
map f! setfilter

map DS sudodelete
map DD delete

map <delete> trash
map trr restore_trash
map trc clear_trash

map dd cut
map yy copy
map pp paste
map cc clear
map u unselect

map K kdeconnect
map A adb
map cp rsync

map dr dragon
map ds dragon-stay
map dl dlfile
map dt dragon-target

map E extract
map C compress
map ta toaudio

map mtd newfold
map mkd push :mkdir<space>
map mds push :sudo-mkdir<space>
map mfl push :mkfile<space>
map mfs push :sudo-mkfile<space>

map chm chmod
map chms sudochmod
map cho chown

map mta mount_adata
map mnt mount
map mo! unmount
map mtp mtp-mount

map sex $$fx
map swa !$fx
map sas &$fx
map sio %$fx

map oo &mimeopen "$fx" && disown
# map O !mimeopen --ask "$fx"
map O !mimeopen --ask-default "$fx"
map ox &xdg-open "$fx" && disown

map ee $tmux neww -n "$(basename $fx)" /usr/bin/vim.gtk3 "$fx"
map see $sudo /usr/bin/vim.gtk3 "$fx"

map H top
map M middle
map L bottom

map mc mark_create
map ms mark-save
map mr mark-remove
map "'" mark-load
map '"' bookmark_jump

map sln symlink
map slp :link

map yf $printf "%s" "$fx" | xclip -selection clipboard
map yb $printf $(basename "$fx") | xclip -selection clipboard
map yp $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard

map <enter> shell
map <c-z> $ kill -STOP $PPID
map sfs sshfs
map dpkg depkg
map opn nautilus-open
map gtd git-download
map R reload
map ow push :open-with<space>
# map W $setsid -f $TERMINAL >/dev/null 2>&1
map i :set preview!
map - :image_preview
map + :video_preview
map pa $batcat "$f"
map ps pager_split

# Navigation
map g/ cd /
map gr cd /root
map gh cd /home/fermi
map gdk cd /home/fermi/Desktop
map gdc cd /home/fermi/Documents
map gdl cd /home/fermi/Downloads
map gvi cd /home/fermi/Videos
map gmu cd /home/fermi/Music
map gpc cd /home/fermi/Pictures
map gnt cd /home/fermi/notes

map gtr cd /home/fermi/.local/share/Trash/files
map glb cd /home/fermi/.local/bin

map gcf cd /home/fermi/.config
map glf cd /home/fermi/.config/lf
map gvl cd /home/fermi/.config/vivaldi

map gw1 cd /home/fermi/Pictures/walls
map gw2 cd /home/fermi/Pictures/walls-2
map gsc cd /home/fermi/Pictures/Screenshots

map gpr cd /home/fermi/Documents/Projects
map gdt cd /home/fermi/Documents/Configs/dotfiles

map gtl cd /home/fermi/Downloads/Tools

map gtc cd /etc
map gpt cd /opt
map gea cd /etc/apt/
map gub cd /usr/bin
map gul cd /usr/local/bin
map gtm cd /tmp
map gdv cd /dev
map gmo cd /media/fermi
